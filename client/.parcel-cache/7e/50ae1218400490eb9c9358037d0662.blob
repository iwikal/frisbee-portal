var _socketIoClient = require("socket.io-client");
const canvas = document.getElementById("canvas");
const context = canvas.getContext("2d");
const socket = _socketIoClient.io("http://localhost:3000");
socket.on("connect", () => {
  socket.send("Hello!");
});
// handle the event sent with socket.send()
socket.on("message", data => {
  console.log(data);
});
let commands;
const tickTime = 1000 / 60;
window.onresize = resizeCanvas;
const startTime = Date.now();
class GameState {
  constructor() {
    this.position = {
      x: 100,
      y: 100,
      r: 0
    };
    this.phi = 0;
  }
  update(dt, commands) {
    this.phi = this.phi + 0.005 * dt;
  }
  draw(ctx) {
    ctx.fillStyle = "#f0f";
    const radius = 50;
    const xPos = 100;
    const yPos = 100;
    const xOffset = Math.cos(this.phi) * radius;
    const yOffset = Math.sin(this.phi) * radius;
    ctx.fillRect(xPos + xOffset, yPos + yOffset, 100, 100);
  }
}
let currentState = new GameState();
function clearCanvas() {
  const previousFillStyle = context.fillStyle;
  context.fillStyle = "#fff";
  context.fillRect(0, 0, canvas.width, canvas.height);
  context.fillStyle = previousFillStyle;
}
function resizeCanvas() {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  currentState.draw(context);
}
function drawLoop(lastFrameTime) {
  return () => {
    const currentTime = Date.now() - startTime;
    let acc = currentTime - lastFrameTime;
    if (acc >= tickTime) {
      console.log("Tick!");
      currentState.update(tickTime, commands);
      acc -= tickTime;
      commands = [];
      clearCanvas();
      currentState.draw(context);
    }
    window.requestAnimationFrame(drawLoop(currentTime));
  };
}
drawLoop(0)();
resizeCanvas();
